'''
nowcode-约瑟夫问题I.py
https://www.nowcoder.com/practice/11b018d042444d4d9ca4914c7b84a968?tpId=8&&tqId=11044&rp=1&ru=/activity/oj&qru=/ta/cracking-the-coding-interview/question-ranking


题目描述
约瑟夫问题是一个非常著名的趣题，即由n个人坐成一圈，按顺时针由1开始给他们编号。然后由第一个人开始报数，数到m的人出局。现在需要求的是最后一个出局的人的编号。

给定两个int n和m，代表游戏的人数。请返回最后一个出局的人的编号。保证n和m小于等于1000。

测试样例：
5 3
返回：4
'''

# -*- coding:utf-8 -*-
class Joseph:
    def getResult(self, n, m):
        # write code here
        '''
        思路一：定义链表模拟过程，一直向前找next节点，删除报数报到m的节点
        思路二：定义数组模拟过程，弹出一个数后，以这个数的位置截断数组，交替左右两部分形成新数组
        '''
        '''
        思路三：递推公式
        参考题解：https://blog.csdn.net/OKasy/article/details/79503398
        递推式：注意人的编号从1 开始，报数也从1 开始
        f(1,m)=0; (i==1)
        f(i,m)=(f(i-1,m)+m)%i ; (i>1)
        
        f(i,m)的返回结果表示 剩余i个人的时候，以m为报数的最大值，最后弹出的人的编号（编号从0 开始到i结束的连续）
        f(1,m) 表示只剩下一个人的时候，弹出的人的编号为1，
        设m=3，表示从1 开始报数，报到3弹出
        f(2) = (f(2-1) + m) % 2 = （ 0 + 3 ）% 2 == 1
        例如：
        n=2个人 [0,1]#编号从0 开始
        m=3 报数到3 则弹出
        现在求 f(n=2, m=3)，即n=2，m=3时，最后弹出的人的编号，
        f(2,3) = (f(1,3) + 3 )% 2 = （ 0 + 3 ）% 2 == 1
        【0,1】 第一次弹出【0】，剩下【1】第二次弹出【1】，即答案为1
        
        '''
        
        #返回弹出者的编号，从0开始到i结束，0到i之间没有间隔；题目要求为从1 开始计数
        def f(n,m):
            if n==1:
                return 0
            return (f(n-1,m)+m)%n
        return f(n,m)+1
            
        
        
        